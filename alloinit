#! /bin/bash

if [ "${BASH_VERSINFO:-0}" -lt 3 ] ; then
    >&2 echo "$0 requires Bash 3 or greater."
    exit 1
fi

# Dependencies needed to run `alloinit`.
alloinit_deps=( fold git ln mkdir readlink rm rmdir sed touch tput )
for dep in "${alloinit_deps[@]}" ; do
    if ! [[ "$(command -v "$dep")" ]] ; then
        >&2 echo "$0 requires $dep."
        exit 1
    fi
done

# Propagate non-zero error codes in pipelines.
set -o pipefail

# Data directory.
data_home="${XDG_DATA_HOME:-$HOME/.local/share}/alloinit"

# Usage information.
usage="$0
Start a new allolib project.

Usage:
    $0 [options...] <dir>

Start a new allolib project in the directory <dir>. The generated project is a \
configured clone of allotemplate, with the \`origin\` remote unset and the \
allotemplate repository available on the remote \`allotemplate\`. The allolib \
dependencies--\`allolib\` (the allolib library) and \`al_ext\` (the stable set \
of allolib extensions)--are shared between projects created by $0 using \
symbolic links, saving disk space and obviating the need to recursively \
download dependencies whenever starting a new allolib project. If the \
dependency directories are moved, then the symbolic links must be changed to \
reflect the new locations before the project will compile.

Options:
    -l <lib_dir>    Specify the directory to install allolib dependencies to.
                    [Default: $data_home]
    -h              Show this help text."

function show_usage() {
    width="$(tput cols)"
    echo "$usage" | fold -s -w $((width > 80 ? 80 : width))
}

if [[ $# -lt 1 ]] ; then
    show_usage
    exit 0
fi

# Positional arguments.
args=()
while [[ $OPTIND -le $# ]] ; do
    if getopts 'l:h' opt ; then
        case "$opt" in
            l)
                lib="$OPTARG"
                ;;
            h)
                show_usage
                exit 0
                ;;
            ?)
                exit 1
                ;;
        esac
    else
        # Store positional argument.
        args+=("${!OPTIND}")
        ((OPTIND++))
    fi
done

# Directory to set up allolib project in.
dest="${args[0]}"
if [[ -z "$dest" ]] ; then
    >&2 echo 'Error: Project directory required.'
    >&2 show_usage
    exit 1
fi
# Directory to keep shared dependencies.
lib="${lib:-$data_home}"
# Whether the dependency directory already existed before running the script.
lib_existed="$(test -d "$lib" ; echo $?)"
# Dependencies shared between allolib projects.
deps=(
    allolib
    al_ext
)

# Temporary file to indicate that directory was created by alloinit.
tmpfile=.alloinit.tmp

# Clean up in case of early abort.
function cleanup() {
    >&2 echo "Could not finish; cleaning up."
    for dep in "${deps[@]}" ; do
        if [[ -f "$lib/.$dep$tmpfile" ]] ; then
            >&2 echo "Removing dependency \`$lib/$dep\`."
            rm -rf "$lib/$dep" "$lib/.$dep$tmpfile"
        fi
    done

    # Remove lib if it did not exist prior to running alloinit.
    if [[ -d "$lib" ]] && ! [[ "$lib_existed" -eq 0 ]] &&
        [[ -n "$(find "$lib" -maxdepth 0 -type d -empty 2> /dev/null)" ]] ; then
        rmdir "$lib"
    fi

    if [[ -f "$dest/$tmpfile" ]] ; then
        >&2 echo "Removing project \`$dest\`."
        rm -rf "$dest"
    fi
}

function onexit() {
    [[ $? -gt 0 ]] && cleanup

    rm -f "$dest/$tmpfile"
}

# Indent the output of subcommands and send output to stderr.
function indent() {
    sed -ur "s/(^|\r)/\1\t/g" >&2
}

trap onexit EXIT

if [[ -d "$dest" ]] ; then
    >&2 echo "Directory \`$dest\` already exists."
    exit 1
fi

>&2 echo "Initializing allolib project in \`$dest\`:"
mkdir -p "$dest" || exit $?
touch "$dest/$tmpfile" || exit $?
git clone --bare git@github.com:Allosphere-Research-Group/allotemplate.git "$dest/.git" \
    --progress 2>&1 | indent || exit $?
git_flags=(--git-dir "$dest/.git" --work-tree "$dest")
git "${git_flags[@]}" config core.bare false 2>&1 | indent || exit $?
git "${git_flags[@]}" checkout 2>&1 | indent || exit $?
# This command faces a fatal error unsetting remote.allotemplate.fetch, but
# otherwise seems to succeed.
git "${git_flags[@]}" remote rename origin allotemplate 2>&1 | indent # || exit $?

printf "\n\n# allolib dependencies\n" >> "$dest/.gitignore"
mkdir -p "$lib" || exit $?
for dep in "${deps[@]}" ; do
    if [[ ! -d "$lib/$dep" ]] ; then
        touch "$lib/.$dep$tmpfile" || exit $?
        >&2 echo "Retrieving dependency \`$dep\`:"
        git clone "git@github.com:Allosphere-Research-Group/$dep.git" "$lib/$dep" \
            --recurse-submodules \
            --progress 2>&1 | indent || exit $?
        rm -f "$lib/.$dep$tmpfile" || exit $?
    fi
    loc="$(readlink -f "$lib/$dep")" || exit $?
    >&2 echo "Linking dependency \`$dep\` to \`$loc\`."
    ln -s "$loc" "$dest" || exit $?
    printf "/$dep\n" >> "$dest/.gitignore"
done

>&2 echo 'Configuring allolib project.'
(cd "$dest" && ./configure.sh ) 2>&1 | indent || exit $?

>&2 echo 'Removing unusable scripts (init.sh; distclean.sh).'
rm "$dest/"{init,distclean}.sh || exit $?

>&2 echo "Allolib project initialized successfully in \`$dest\`."

